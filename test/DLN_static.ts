import { ethers, upgrades } from "hardhat";
import { expect } from "chai";
import { MockDlnSource, MockDlnDestination } from "../typechain-types";
const debridgeInitParams = require("../assets/debridgeInitParams");

import { ETH_CHAIN_ID, createCoreContract } from './utils/configureCore';
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";

const ZERO_ADDRESS = ethers.constants.AddressZero;

describe('DLN static tests', () => {
  let [deployerAccount, aliceAccount, bobAccount, konradAccount]: SignerWithAddress[] = [];
  let [deployer, alice, bob, konrad]: string[] = [];
  let dlnSourceEth: MockDlnSource;
  let dlnDestinationETH: MockDlnDestination;

  const deployInitParamsETH = debridgeInitParams['ETH'];

  before(async () => {
    [deployerAccount, aliceAccount, bobAccount, konradAccount] = await ethers.getSigners();

    deployer = deployerAccount.address;
    alice = aliceAccount.address;
    bob = bobAccount.address;
    konrad = konradAccount.address;
    console.log(deployer,alice, bob, konrad);
    // #region core cotracts
    const { deBridgeGateETH: deBridgeGateETH, deBridgeGateBSC: deBridgeGateBSC } = await createCoreContract(deployerAccount);


    // #endregion core cotracts

    const mockDlnSourceFactory = await ethers.getContractFactory("MockDlnSource", deployer);
    const mockDlnDestinationFactory = await ethers.getContractFactory("MockDlnDestination", deployer);

    dlnSourceEth = await upgrades.deployProxy(
      mockDlnSourceFactory,
      [
        deBridgeGateETH.address,
        deployInitParamsETH.globalFixedNativeFee,
        deployInitParamsETH.globalTransferFeeBps,
        ETH_CHAIN_ID
      ],
      {
        initializer: "initializeMock",
        kind: "transparent",
      }
    ) as MockPmmSource;
    dlnDestinationETH = await upgrades.deployProxy(
      mockDlnDestinationFactory,
      [
        deBridgeGateETH.address,
        ETH_CHAIN_ID
      ],
      {
        initializer: "initializeMock",
        kind: "transparent",
      }
    ) as MockPmmDestination;
  });



  it('Check correct encode order', async () => {

    // Buffer	Field
    // 0,0,0,0,0,0,0,10	Nonce
    // 20	Maker Address Size
    // 109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109	Maker Address
    // 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1	Give Chain Id
    // 20	Give Token Address Size
    // 116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116	Give Token Address
    // 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100	Give Amount
    // 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	Take Chain Id
    // 32	Take Token Address Size
    // 97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,	Take Token Address
    // 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200	Take Amount
    // 32	Receiver Address Size
    // 114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114	Receiver Address
    // 20	Give Patch Auth Address Size
    // 112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112	Give Patch Auth Address
    // 32	Order Auth Dst Address Size
    // 112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112	Order Auth Dst Address
    // 0	Allowed Taker Address Size
    // 0	Allowed Cancel Beneficiary Address Size
    // 0	External Call Flag

    const order = {
      giveChainId: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),
      makerOrderNonce: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 10]),
      makerSrc: new Uint8Array([109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109]),
      giveTokenAddress: new Uint8Array([116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116]),
      giveAmount: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]),
      takeTokenAddress: new Uint8Array([97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,]),
      takeAmount: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200]),
      takeChainId: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      receiverDst: new Uint8Array([114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114]),
      givePatchAuthoritySrc: new Uint8Array([112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112]),
      orderAuthorityAddressDst: new Uint8Array([112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112]),
      allowedTakerDst: new Uint8Array([]),
      externalCall: new Uint8Array([]),
      allowedCancelBeneficiarySrc: new Uint8Array([])
    };

    const encodedOrderHex = await dlnSourceEth.encodeOrder(order);
    const expected = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 10, 20, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 20, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 32, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 20, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 32, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 0, 0, 0]);
    const expectedHex = Buffer.from(expected).toString('hex');

    // console.log("encodedOrder", encodedOrderHex);
    // console.log("expectedHex", expectedHex);

    expect(encodedOrderHex.substring(2, encodedOrderHex.length)).to.equal(expectedHex);
  });

  it('Check correct encode solana claim', async () => {

    const takeChainId = '0x0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a';
    const srcProgramId = '0x0d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d36';
    const actionBeneficiary = '0xc8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8';
    //const orderGiveTokenAdress = '0a0000000000000001000000';
    const orderGiveTokenAdress = '0x6464646464646464646464646464646464646464646464646464646464646464';
    const orderId = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';
    const reward1 = '18446744073709551614';
    const reward2 = '18446744073709551613';

    const encodedSolanaClaim = await dlnDestinationETH.encodeSolanaClaim(takeChainId, srcProgramId, actionBeneficiary,
      orderGiveTokenAdress, orderId, reward1, reward2);
    const expected = '0xfeffffffffffffff01f01d1f0000000000000000000101000000000000000100000000000000010000008c97258f4e2489f1bb3d1029148e0d830b5a1399daff1084048e7bd8dbe9f8590300000000000000000000002000000000000000c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c800000000200000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9000000002000000000000000646464646464646464646464646464646464646464646464646464646464646400008c97258f4e2489f1bb3d1029148e0d830b5a1399daff1084048e7bd8dbe9f85906000000000000001968562fef0aab1b1d8f99d44306595cd4ba41d7cc899c007a774d23ad702ff601019f3d96f657370bf1dbb3313efba51ea7a08296ac33d77b949e1b62d538db37f20001c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c80000646464646464646464646464646464646464646464646464646464646464646400000000000000000000000000000000000000000000000000000000000000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90000010000000000000001fdffffffffffffff00000000000107000000000000000200000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d3601000000000000000000000005000000000000005354415445000300000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360100000000000000000000000a00000000000000464545204c4544474552000400000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d3602000000000000000000000011000000000000004645455f4c45444745525f57414c4c45540000000020000000000000006464646464646464646464646464646464646464646464646464646464646464000600000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360200000000000000000000001000000000000000474956455f4f524445525f5354415445000000002000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000700000000000000010000008c97258f4e2489f1bb3d1029148e0d830b5a1399daff1084048e7bd8dbe9f8590300000000000000000000002000000000000000c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c800000000200000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90000000020000000000000006464646464646464646464646464646464646464646464646464646464646464000900000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360200000000000000000000001100000000000000474956455f4f524445525f57414c4c4554000000002000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000b00000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360200000000000000000000001800000000000000415554484f52495a45445f4e41544956455f53454e4445520000000020000000000000000a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a00000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360d0000000000000062584959deb8a728a91cebdc187b545d920479265052145f31fb80c73fac5aea00001968562fef0aab1b1d8f99d44306595cd4ba41d7cc899c007a774d23ad702ff60101980176896e24d940ee6f0a89d0020e1cd53aa3d17be42270bb39223f6ed75c6300018c6ecc336484fb8f32871d3c1656d832cc86eb2465048fea348cde76ae57233100014026e8772b7640ce6fb9fd348473f43df344e3dcd89a43c93db81ee6efe08e67000106a7d517187bd16635dad40455fdc2c0c124c68f215675a5dbbacb5f080000000000107fe6a33e564217c5773c604a479581564c5e4c12465d65c9374ee2190f5ee400019f3d96f657370bf1dbb3313efba51ea7a08296ac33d77b949e1b62d538db37f20001c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c800011507b8f891ebbfc57577d4d2e6a2b52dc0a744eba2be503e686d0d07d19e6ec7000164646464646464646464646464646464646464646464646464646464646464640000efe9c4afa6dc798a27b0c18e3cf0b76ad3fe8cc93764f6cb3112f9397f2cd1c6000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9000028000000000000005951b44f8e9042fbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';

    // console.log("encodedSolanaClaim", encodedSolanaClaim);

    expect(encodedSolanaClaim).to.equal(expected);
  });


  it('Check correct encode solana cancel', async () => {
    const takeChainId = '0x0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a';
    const srcProgramId = '0x0d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d36';
    const actionBeneficiary = '0xc8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8';
    const orderGiveTokenAddress = '0x6464646464646464646464646464646464646464646464646464646464646464';
    const orderId = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';
    const reward1 = '18446744073709551614';
    const reward2 = '18446744073709551613';
                    
    const encodedSolanaCancel = await dlnDestinationETH.encodeSolanaCancel(takeChainId, srcProgramId, actionBeneficiary,
      orderGiveTokenAddress, orderId, reward1, reward2);
    const expected = '0xfeffffffffffffff01f01d1f0000000000000000000101000000000000000100000000000000010000008c97258f4e2489f1bb3d1029148e0d830b5a1399daff1084048e7bd8dbe9f8590300000000000000000000002000000000000000c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c800000000200000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9000000002000000000000000646464646464646464646464646464646464646464646464646464646464646400008c97258f4e2489f1bb3d1029148e0d830b5a1399daff1084048e7bd8dbe9f85906000000000000001968562fef0aab1b1d8f99d44306595cd4ba41d7cc899c007a774d23ad702ff601019f3d96f657370bf1dbb3313efba51ea7a08296ac33d77b949e1b62d538db37f20001c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c80000646464646464646464646464646464646464646464646464646464646464646400000000000000000000000000000000000000000000000000000000000000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90000010000000000000001fdffffffffffffff00000000000107000000000000000200000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d3601000000000000000000000005000000000000005354415445000300000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360100000000000000000000000a00000000000000464545204c4544474552000400000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d3602000000000000000000000011000000000000004645455f4c45444745525f57414c4c45540000000020000000000000006464646464646464646464646464646464646464646464646464646464646464000600000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360200000000000000000000001000000000000000474956455f4f524445525f5354415445000000002000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000700000000000000010000008c97258f4e2489f1bb3d1029148e0d830b5a1399daff1084048e7bd8dbe9f8590300000000000000000000002000000000000000c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c800000000200000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90000000020000000000000006464646464646464646464646464646464646464646464646464646464646464000900000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360200000000000000000000001100000000000000474956455f4f524445525f57414c4c4554000000002000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000b00000000000000010000000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360200000000000000000000001800000000000000415554484f52495a45445f4e41544956455f53454e4445520000000020000000000000000a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a00000d0720cc7c6605b7736c08b95ad98d6b67f2da0ede7eff702e76a173c18e9d360d0000000000000062584959deb8a728a91cebdc187b545d920479265052145f31fb80c73fac5aea00001968562fef0aab1b1d8f99d44306595cd4ba41d7cc899c007a774d23ad702ff60101980176896e24d940ee6f0a89d0020e1cd53aa3d17be42270bb39223f6ed75c6300018c6ecc336484fb8f32871d3c1656d832cc86eb2465048fea348cde76ae57233100014026e8772b7640ce6fb9fd348473f43df344e3dcd89a43c93db81ee6efe08e67000106a7d517187bd16635dad40455fdc2c0c124c68f215675a5dbbacb5f080000000000107fe6a33e564217c5773c604a479581564c5e4c12465d65c9374ee2190f5ee400019f3d96f657370bf1dbb3313efba51ea7a08296ac33d77b949e1b62d538db37f20001c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c800011507b8f891ebbfc57577d4d2e6a2b52dc0a744eba2be503e686d0d07d19e6ec7000164646464646464646464646464646464646464646464646464646464646464640000efe9c4afa6dc798a27b0c18e3cf0b76ad3fe8cc93764f6cb3112f9397f2cd1c6000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90000280000000000000013617eeecc8d454cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';

    // console.log("encodedSolanaCancel", encodedSolanaCancel);

    expect(encodedSolanaCancel).to.equal(expected);
  });
});
